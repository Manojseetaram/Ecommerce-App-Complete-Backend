// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN 
  USER
}
enum OrderEventStatus {
  PENDING
  COMPLETED 
  CANCELLED
  DELIVERED
  OUT_FOR_DELIVERY
}
model User {
  id                    Int      @id @default(autoincrement())
  name                  String
  email                 String   @unique
  password              String
  role                  Role     @default(USER)
  defaultShippingAddress Int?
  defaultBillingAddress  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[] // Changed `adress` to `addresses`
cartItems CartItem[]
orderItems Order[]
  @@map("user") // Ensures Prisma maps correctly to the `user` table
}

model Address { // Changed `Adress` to `Address`
  id        Int    @id @default(autoincrement())
  userId    Int
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  street    String
  city      String
  state     String
  country   String
  pipCode   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("address") // Ensures Prisma maps correctly to the `address` table
}

model Product {
 id Int @id @default(autoincrement())
 name String
 description String @db.Text
 price Decimal
 tags String
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
  cartItems CartItem[]

  
orderProducts OrderProduct[]
 @@map("products")


}
model CartItem {
  id Int @id @default(autoincrement())
  userId Int
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int 
  quntity Int
  product   Product  @relation(fields: [productId],references: [id] , onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    @@map("cartItems")
}
 model Order {
   id Int @id @default(autoincrement())
   userId Int
   user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
   netAmount String
   adress    String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   orderProducts OrderProduct[]
   orderEvents OrderEvent[]
   @@map("orders")

 }

  model OrderProduct {
   id Int @id @default(autoincrement())
   orderId Int
   order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
   productId Int
   product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
   quantiy  Int
   adress    String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   @@map("orderProducts")

 }


  model OrderEvent {
    Id Int @id @default(autoincrement())
    orderId Int 
    order Order @relation(fields: [orderId], references: [id], onDelete:Cascade)
    status OrderEventStatus @default(PENDING)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@map("orderEvents")
  }
